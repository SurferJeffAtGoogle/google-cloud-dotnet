// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/irm/v1alpha2/incidents_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Irm.V1Alpha2 {
  /// <summary>
  /// The Incident API for Incident Response &amp; Management.
  /// </summary>
  public static partial class IncidentService
  {
    static readonly string __ServiceName = "google.cloud.irm.v1alpha2.IncidentService";

    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest> __Marshaller_CreateIncidentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Incident> __Marshaller_Incident = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Incident.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest> __Marshaller_GetIncidentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest> __Marshaller_SearchIncidentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse> __Marshaller_SearchIncidentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest> __Marshaller_UpdateIncidentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest> __Marshaller_SearchSimilarIncidentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse> __Marshaller_SearchSimilarIncidentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest> __Marshaller_CreateAnnotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Annotation> __Marshaller_Annotation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Annotation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest> __Marshaller_ListAnnotationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse> __Marshaller_ListAnnotationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest> __Marshaller_UpdateAnnotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest> __Marshaller_CreateTagRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Tag> __Marshaller_Tag = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Tag.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest> __Marshaller_DeleteTagRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest> __Marshaller_ListTagsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse> __Marshaller_ListTagsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest> __Marshaller_CreateSignalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Signal> __Marshaller_Signal = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Signal.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest> __Marshaller_ListSignalsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse> __Marshaller_ListSignalsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest> __Marshaller_GetSignalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest> __Marshaller_UpdateSignalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest> __Marshaller_AcknowledgeSignalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse> __Marshaller_AcknowledgeSignalResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest> __Marshaller_EscalateIncidentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse> __Marshaller_EscalateIncidentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest> __Marshaller_CreateArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Artifact> __Marshaller_Artifact = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Artifact.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest> __Marshaller_ListArtifactsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse> __Marshaller_ListArtifactsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest> __Marshaller_UpdateArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest> __Marshaller_DeleteArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest> __Marshaller_GetShiftHandoffPresetsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets> __Marshaller_ShiftHandoffPresets = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest> __Marshaller_SendShiftHandoffRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse> __Marshaller_SendShiftHandoffResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest> __Marshaller_CreateSubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.Subscription> __Marshaller_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.Subscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest> __Marshaller_ListSubscriptionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse> __Marshaller_ListSubscriptionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest> __Marshaller_DeleteSubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest> __Marshaller_CreateIncidentRoleAssignmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Marshaller_IncidentRoleAssignment = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest> __Marshaller_DeleteIncidentRoleAssignmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest> __Marshaller_ListIncidentRoleAssignmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse> __Marshaller_ListIncidentRoleAssignmentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest> __Marshaller_RequestIncidentRoleHandoverRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest> __Marshaller_ConfirmIncidentRoleHandoverRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest> __Marshaller_ForceIncidentRoleHandoverRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest> __Marshaller_CancelIncidentRoleHandoverRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident> __Method_CreateIncident = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIncident",
        __Marshaller_CreateIncidentRequest,
        __Marshaller_Incident);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident> __Method_GetIncident = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIncident",
        __Marshaller_GetIncidentRequest,
        __Marshaller_Incident);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest, global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse> __Method_SearchIncidents = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest, global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchIncidents",
        __Marshaller_SearchIncidentsRequest,
        __Marshaller_SearchIncidentsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident> __Method_UpdateIncident = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.Incident>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateIncident",
        __Marshaller_UpdateIncidentRequest,
        __Marshaller_Incident);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest, global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse> __Method_SearchSimilarIncidents = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest, global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchSimilarIncidents",
        __Marshaller_SearchSimilarIncidentsRequest,
        __Marshaller_SearchSimilarIncidentsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest, global::Google.Cloud.Irm.V1Alpha2.Annotation> __Method_CreateAnnotation = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest, global::Google.Cloud.Irm.V1Alpha2.Annotation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAnnotation",
        __Marshaller_CreateAnnotationRequest,
        __Marshaller_Annotation);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest, global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse> __Method_ListAnnotations = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest, global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotations",
        __Marshaller_ListAnnotationsRequest,
        __Marshaller_ListAnnotationsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest, global::Google.Cloud.Irm.V1Alpha2.Annotation> __Method_UpdateAnnotation = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest, global::Google.Cloud.Irm.V1Alpha2.Annotation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAnnotation",
        __Marshaller_UpdateAnnotationRequest,
        __Marshaller_Annotation);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest, global::Google.Cloud.Irm.V1Alpha2.Tag> __Method_CreateTag = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest, global::Google.Cloud.Irm.V1Alpha2.Tag>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTag",
        __Marshaller_CreateTagRequest,
        __Marshaller_Tag);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTag = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTag",
        __Marshaller_DeleteTagRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest, global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse> __Method_ListTags = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest, global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTags",
        __Marshaller_ListTagsRequest,
        __Marshaller_ListTagsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal> __Method_CreateSignal = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSignal",
        __Marshaller_CreateSignalRequest,
        __Marshaller_Signal);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest, global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse> __Method_ListSignals = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest, global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSignals",
        __Marshaller_ListSignalsRequest,
        __Marshaller_ListSignalsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal> __Method_GetSignal = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSignal",
        __Marshaller_GetSignalRequest,
        __Marshaller_Signal);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal> __Method_UpdateSignal = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest, global::Google.Cloud.Irm.V1Alpha2.Signal>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSignal",
        __Marshaller_UpdateSignalRequest,
        __Marshaller_Signal);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest, global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse> __Method_AcknowledgeSignal = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest, global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcknowledgeSignal",
        __Marshaller_AcknowledgeSignalRequest,
        __Marshaller_AcknowledgeSignalResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse> __Method_EscalateIncident = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest, global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EscalateIncident",
        __Marshaller_EscalateIncidentRequest,
        __Marshaller_EscalateIncidentResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest, global::Google.Cloud.Irm.V1Alpha2.Artifact> __Method_CreateArtifact = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest, global::Google.Cloud.Irm.V1Alpha2.Artifact>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateArtifact",
        __Marshaller_CreateArtifactRequest,
        __Marshaller_Artifact);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest, global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse> __Method_ListArtifacts = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest, global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListArtifacts",
        __Marshaller_ListArtifactsRequest,
        __Marshaller_ListArtifactsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest, global::Google.Cloud.Irm.V1Alpha2.Artifact> __Method_UpdateArtifact = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest, global::Google.Cloud.Irm.V1Alpha2.Artifact>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateArtifact",
        __Marshaller_UpdateArtifactRequest,
        __Marshaller_Artifact);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteArtifact = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteArtifact",
        __Marshaller_DeleteArtifactRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest, global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets> __Method_GetShiftHandoffPresets = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest, global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShiftHandoffPresets",
        __Marshaller_GetShiftHandoffPresetsRequest,
        __Marshaller_ShiftHandoffPresets);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest, global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse> __Method_SendShiftHandoff = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest, global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendShiftHandoff",
        __Marshaller_SendShiftHandoffRequest,
        __Marshaller_SendShiftHandoffResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest, global::Google.Cloud.Irm.V1Alpha2.Subscription> __Method_CreateSubscription = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest, global::Google.Cloud.Irm.V1Alpha2.Subscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSubscription",
        __Marshaller_CreateSubscriptionRequest,
        __Marshaller_Subscription);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest, global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse> __Method_ListSubscriptions = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest, global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubscriptions",
        __Marshaller_ListSubscriptionsRequest,
        __Marshaller_ListSubscriptionsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSubscription = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSubscription",
        __Marshaller_DeleteSubscriptionRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Method_CreateIncidentRoleAssignment = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIncidentRoleAssignment",
        __Marshaller_CreateIncidentRoleAssignmentRequest,
        __Marshaller_IncidentRoleAssignment);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteIncidentRoleAssignment = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIncidentRoleAssignment",
        __Marshaller_DeleteIncidentRoleAssignmentRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest, global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse> __Method_ListIncidentRoleAssignments = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest, global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIncidentRoleAssignments",
        __Marshaller_ListIncidentRoleAssignmentsRequest,
        __Marshaller_ListIncidentRoleAssignmentsResponse);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Method_RequestIncidentRoleHandover = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestIncidentRoleHandover",
        __Marshaller_RequestIncidentRoleHandoverRequest,
        __Marshaller_IncidentRoleAssignment);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Method_ConfirmIncidentRoleHandover = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfirmIncidentRoleHandover",
        __Marshaller_ConfirmIncidentRoleHandoverRequest,
        __Marshaller_IncidentRoleAssignment);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Method_ForceIncidentRoleHandover = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ForceIncidentRoleHandover",
        __Marshaller_ForceIncidentRoleHandoverRequest,
        __Marshaller_IncidentRoleAssignment);

    static readonly grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> __Method_CancelIncidentRoleHandover = new grpc::Method<global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest, global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelIncidentRoleHandover",
        __Marshaller_CancelIncidentRoleHandoverRequest,
        __Marshaller_IncidentRoleAssignment);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Irm.V1Alpha2.IncidentsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IncidentService</summary>
    public abstract partial class IncidentServiceBase
    {
      /// <summary>
      /// Creates a new incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Incident> CreateIncident(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns an incident by name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Incident> GetIncident(global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of incidents.
      /// Incidents are ordered by start time, with the most recent incidents first.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse> SearchIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Incident> UpdateIncident(global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of incidents that are "similar" to the specified incident
      /// or signal. This functionality is provided on a best-effort basis and the
      /// definition of "similar" is subject to change.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse> SearchSimilarIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an annotation on an existing incident. Only 'text/plain' and
      /// 'text/markdown' annotations can be created via this method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Annotation> CreateAnnotation(global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists annotations that are part of an incident. No assumptions should be
      /// made on the content-type of the annotation returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse> ListAnnotations(global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an annotation on an existing incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Annotation> UpdateAnnotation(global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a tag on an existing incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Tag> CreateTag(global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing tag.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTag(global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists tags that are part of an incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse> ListTags(global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new signal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Signal> CreateSignal(global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists signals that are part of an incident.
      /// Signals are returned in reverse chronological order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse> ListSignals(global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a signal by name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Signal> GetSignal(global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing signal (e.g. to assign/unassign it to an
      /// incident).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Signal> UpdateSignal(global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Acks a signal. This acknowledges the signal in the underlying system,
      /// indicating that the caller takes responsibility for looking into this.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse> AcknowledgeSignal(global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Escalates an incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse> EscalateIncident(global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new artifact.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Artifact> CreateArtifact(global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of artifacts for an incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse> ListArtifacts(global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing artifact.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Artifact> UpdateArtifact(global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing artifact.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteArtifact(global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
      /// default values for handoff message fields.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets> GetShiftHandoffPresets(global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sends a summary of the shift for oncall handoff.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse> SendShiftHandoff(global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new subscription.
      /// This will fail if:
      ///    a. there are too many (50) subscriptions in the incident already
      ///    b. a subscription using the given channel already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.Subscription> CreateSubscription(global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of subscriptions for an incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse> ListSubscriptions(global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscription(global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a role assignment on an existing incident. Normally, the user field
      /// will be set when assigning a role to oneself, and the next field will be
      /// set when proposing another user as the assignee. Setting the next field
      /// directly to a user other than oneself is equivalent to proposing and
      /// force-assigning the role to the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CreateIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing role assignment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists role assignments that are part of an incident.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse> ListIncidentRoleAssignments(global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts a role handover. The proposed assignee will receive an email
      /// notifying them of the assignment. This will fail if a role handover is
      /// already pending.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> RequestIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Confirms a role handover. This will fail if the 'proposed_assignee' field
      /// of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
      /// the request. If the caller is not the new_assignee,
      /// ForceIncidentRoleHandover should be used instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ConfirmIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Forces a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
      /// should be used instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ForceIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CancelIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IncidentService</summary>
    public partial class IncidentServiceClient : grpc::ClientBase<IncidentServiceClient>
    {
      /// <summary>Creates a new client for IncidentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IncidentServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IncidentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IncidentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IncidentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IncidentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident CreateIncident(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIncident(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident CreateIncident(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIncident, null, options, request);
      }
      /// <summary>
      /// Creates a new incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> CreateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIncidentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> CreateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIncident, null, options, request);
      }
      /// <summary>
      /// Returns an incident by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident GetIncident(global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncident(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns an incident by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident GetIncident(global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIncident, null, options, request);
      }
      /// <summary>
      /// Returns an incident by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> GetIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncidentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns an incident by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> GetIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.GetIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIncident, null, options, request);
      }
      /// <summary>
      /// Returns a list of incidents.
      /// Incidents are ordered by start time, with the most recent incidents first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse SearchIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchIncidents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of incidents.
      /// Incidents are ordered by start time, with the most recent incidents first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse SearchIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchIncidents, null, options, request);
      }
      /// <summary>
      /// Returns a list of incidents.
      /// Incidents are ordered by start time, with the most recent incidents first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse> SearchIncidentsAsync(global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchIncidentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of incidents.
      /// Incidents are ordered by start time, with the most recent incidents first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsResponse> SearchIncidentsAsync(global::Google.Cloud.Irm.V1Alpha2.SearchIncidentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchIncidents, null, options, request);
      }
      /// <summary>
      /// Updates an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident UpdateIncident(global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIncident(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Incident UpdateIncident(global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateIncident, null, options, request);
      }
      /// <summary>
      /// Updates an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> UpdateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIncidentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Incident> UpdateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateIncident, null, options, request);
      }
      /// <summary>
      /// Returns a list of incidents that are "similar" to the specified incident
      /// or signal. This functionality is provided on a best-effort basis and the
      /// definition of "similar" is subject to change.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse SearchSimilarIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchSimilarIncidents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of incidents that are "similar" to the specified incident
      /// or signal. This functionality is provided on a best-effort basis and the
      /// definition of "similar" is subject to change.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse SearchSimilarIncidents(global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchSimilarIncidents, null, options, request);
      }
      /// <summary>
      /// Returns a list of incidents that are "similar" to the specified incident
      /// or signal. This functionality is provided on a best-effort basis and the
      /// definition of "similar" is subject to change.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse> SearchSimilarIncidentsAsync(global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchSimilarIncidentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of incidents that are "similar" to the specified incident
      /// or signal. This functionality is provided on a best-effort basis and the
      /// definition of "similar" is subject to change.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsResponse> SearchSimilarIncidentsAsync(global::Google.Cloud.Irm.V1Alpha2.SearchSimilarIncidentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchSimilarIncidents, null, options, request);
      }
      /// <summary>
      /// Creates an annotation on an existing incident. Only 'text/plain' and
      /// 'text/markdown' annotations can be created via this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Annotation CreateAnnotation(global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an annotation on an existing incident. Only 'text/plain' and
      /// 'text/markdown' annotations can be created via this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Annotation CreateAnnotation(global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAnnotation, null, options, request);
      }
      /// <summary>
      /// Creates an annotation on an existing incident. Only 'text/plain' and
      /// 'text/markdown' annotations can be created via this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Annotation> CreateAnnotationAsync(global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an annotation on an existing incident. Only 'text/plain' and
      /// 'text/markdown' annotations can be created via this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Annotation> CreateAnnotationAsync(global::Google.Cloud.Irm.V1Alpha2.CreateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAnnotation, null, options, request);
      }
      /// <summary>
      /// Lists annotations that are part of an incident. No assumptions should be
      /// made on the content-type of the annotation returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse ListAnnotations(global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists annotations that are part of an incident. No assumptions should be
      /// made on the content-type of the annotation returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse ListAnnotations(global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Lists annotations that are part of an incident. No assumptions should be
      /// made on the content-type of the annotation returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse> ListAnnotationsAsync(global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists annotations that are part of an incident. No assumptions should be
      /// made on the content-type of the annotation returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsResponse> ListAnnotationsAsync(global::Google.Cloud.Irm.V1Alpha2.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Updates an annotation on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Annotation UpdateAnnotation(global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an annotation on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Annotation UpdateAnnotation(global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAnnotation, null, options, request);
      }
      /// <summary>
      /// Updates an annotation on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Annotation> UpdateAnnotationAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an annotation on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Annotation> UpdateAnnotationAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAnnotation, null, options, request);
      }
      /// <summary>
      /// Creates a tag on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Tag CreateTag(global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTag(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a tag on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Tag CreateTag(global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTag, null, options, request);
      }
      /// <summary>
      /// Creates a tag on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Tag> CreateTagAsync(global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTagAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a tag on an existing incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Tag> CreateTagAsync(global::Google.Cloud.Irm.V1Alpha2.CreateTagRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTag, null, options, request);
      }
      /// <summary>
      /// Deletes an existing tag.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTag(global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTag(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing tag.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTag(global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTag, null, options, request);
      }
      /// <summary>
      /// Deletes an existing tag.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTagAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTagAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing tag.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTagAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteTagRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTag, null, options, request);
      }
      /// <summary>
      /// Lists tags that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse ListTags(global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTags(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists tags that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse ListTags(global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTags, null, options, request);
      }
      /// <summary>
      /// Lists tags that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse> ListTagsAsync(global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTagsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists tags that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListTagsResponse> ListTagsAsync(global::Google.Cloud.Irm.V1Alpha2.ListTagsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTags, null, options, request);
      }
      /// <summary>
      /// Creates a new signal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal CreateSignal(global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSignal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new signal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal CreateSignal(global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSignal, null, options, request);
      }
      /// <summary>
      /// Creates a new signal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> CreateSignalAsync(global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSignalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new signal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> CreateSignalAsync(global::Google.Cloud.Irm.V1Alpha2.CreateSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSignal, null, options, request);
      }
      /// <summary>
      /// Lists signals that are part of an incident.
      /// Signals are returned in reverse chronological order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse ListSignals(global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSignals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists signals that are part of an incident.
      /// Signals are returned in reverse chronological order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse ListSignals(global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSignals, null, options, request);
      }
      /// <summary>
      /// Lists signals that are part of an incident.
      /// Signals are returned in reverse chronological order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse> ListSignalsAsync(global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSignalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists signals that are part of an incident.
      /// Signals are returned in reverse chronological order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListSignalsResponse> ListSignalsAsync(global::Google.Cloud.Irm.V1Alpha2.ListSignalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSignals, null, options, request);
      }
      /// <summary>
      /// Returns a signal by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal GetSignal(global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSignal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signal by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal GetSignal(global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSignal, null, options, request);
      }
      /// <summary>
      /// Returns a signal by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> GetSignalAsync(global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSignalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signal by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> GetSignalAsync(global::Google.Cloud.Irm.V1Alpha2.GetSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSignal, null, options, request);
      }
      /// <summary>
      /// Updates an existing signal (e.g. to assign/unassign it to an
      /// incident).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal UpdateSignal(global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSignal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing signal (e.g. to assign/unassign it to an
      /// incident).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Signal UpdateSignal(global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSignal, null, options, request);
      }
      /// <summary>
      /// Updates an existing signal (e.g. to assign/unassign it to an
      /// incident).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> UpdateSignalAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSignalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing signal (e.g. to assign/unassign it to an
      /// incident).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Signal> UpdateSignalAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSignal, null, options, request);
      }
      /// <summary>
      /// Acks a signal. This acknowledges the signal in the underlying system,
      /// indicating that the caller takes responsibility for looking into this.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse AcknowledgeSignal(global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeSignal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acks a signal. This acknowledges the signal in the underlying system,
      /// indicating that the caller takes responsibility for looking into this.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse AcknowledgeSignal(global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcknowledgeSignal, null, options, request);
      }
      /// <summary>
      /// Acks a signal. This acknowledges the signal in the underlying system,
      /// indicating that the caller takes responsibility for looking into this.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse> AcknowledgeSignalAsync(global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeSignalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acks a signal. This acknowledges the signal in the underlying system,
      /// indicating that the caller takes responsibility for looking into this.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalResponse> AcknowledgeSignalAsync(global::Google.Cloud.Irm.V1Alpha2.AcknowledgeSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcknowledgeSignal, null, options, request);
      }
      /// <summary>
      /// Escalates an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse EscalateIncident(global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EscalateIncident(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Escalates an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse EscalateIncident(global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EscalateIncident, null, options, request);
      }
      /// <summary>
      /// Escalates an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse> EscalateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EscalateIncidentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Escalates an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentResponse> EscalateIncidentAsync(global::Google.Cloud.Irm.V1Alpha2.EscalateIncidentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EscalateIncident, null, options, request);
      }
      /// <summary>
      /// Creates a new artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Artifact CreateArtifact(global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Artifact CreateArtifact(global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateArtifact, null, options, request);
      }
      /// <summary>
      /// Creates a new artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Artifact> CreateArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Artifact> CreateArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.CreateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateArtifact, null, options, request);
      }
      /// <summary>
      /// Returns a list of artifacts for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse ListArtifacts(global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListArtifacts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of artifacts for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse ListArtifacts(global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListArtifacts, null, options, request);
      }
      /// <summary>
      /// Returns a list of artifacts for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse> ListArtifactsAsync(global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListArtifactsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of artifacts for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListArtifactsResponse> ListArtifactsAsync(global::Google.Cloud.Irm.V1Alpha2.ListArtifactsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListArtifacts, null, options, request);
      }
      /// <summary>
      /// Updates an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Artifact UpdateArtifact(global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Artifact UpdateArtifact(global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateArtifact, null, options, request);
      }
      /// <summary>
      /// Updates an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Artifact> UpdateArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Artifact> UpdateArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.UpdateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateArtifact, null, options, request);
      }
      /// <summary>
      /// Deletes an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteArtifact(global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteArtifact(global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteArtifact, null, options, request);
      }
      /// <summary>
      /// Deletes an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing artifact.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteArtifactAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteArtifact, null, options, request);
      }
      /// <summary>
      /// Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
      /// default values for handoff message fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets GetShiftHandoffPresets(global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShiftHandoffPresets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
      /// default values for handoff message fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets GetShiftHandoffPresets(global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShiftHandoffPresets, null, options, request);
      }
      /// <summary>
      /// Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
      /// default values for handoff message fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets> GetShiftHandoffPresetsAsync(global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShiftHandoffPresetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
      /// default values for handoff message fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ShiftHandoffPresets> GetShiftHandoffPresetsAsync(global::Google.Cloud.Irm.V1Alpha2.GetShiftHandoffPresetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShiftHandoffPresets, null, options, request);
      }
      /// <summary>
      /// Sends a summary of the shift for oncall handoff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse SendShiftHandoff(global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendShiftHandoff(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a summary of the shift for oncall handoff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse SendShiftHandoff(global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendShiftHandoff, null, options, request);
      }
      /// <summary>
      /// Sends a summary of the shift for oncall handoff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse> SendShiftHandoffAsync(global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendShiftHandoffAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a summary of the shift for oncall handoff.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffResponse> SendShiftHandoffAsync(global::Google.Cloud.Irm.V1Alpha2.SendShiftHandoffRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendShiftHandoff, null, options, request);
      }
      /// <summary>
      /// Creates a new subscription.
      /// This will fail if:
      ///    a. there are too many (50) subscriptions in the incident already
      ///    b. a subscription using the given channel already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Subscription CreateSubscription(global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new subscription.
      /// This will fail if:
      ///    a. there are too many (50) subscriptions in the incident already
      ///    b. a subscription using the given channel already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.Subscription CreateSubscription(global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      /// Creates a new subscription.
      /// This will fail if:
      ///    a. there are too many (50) subscriptions in the incident already
      ///    b. a subscription using the given channel already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Subscription> CreateSubscriptionAsync(global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new subscription.
      /// This will fail if:
      ///    a. there are too many (50) subscriptions in the incident already
      ///    b. a subscription using the given channel already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.Subscription> CreateSubscriptionAsync(global::Google.Cloud.Irm.V1Alpha2.CreateSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      /// Returns a list of subscriptions for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of subscriptions for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Returns a list of subscriptions for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of subscriptions for an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.Irm.V1Alpha2.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Deletes an existing subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes an existing subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Creates a role assignment on an existing incident. Normally, the user field
      /// will be set when assigning a role to oneself, and the next field will be
      /// set when proposing another user as the assignee. Setting the next field
      /// directly to a user other than oneself is equivalent to proposing and
      /// force-assigning the role to the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment CreateIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIncidentRoleAssignment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a role assignment on an existing incident. Normally, the user field
      /// will be set when assigning a role to oneself, and the next field will be
      /// set when proposing another user as the assignee. Setting the next field
      /// directly to a user other than oneself is equivalent to proposing and
      /// force-assigning the role to the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment CreateIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIncidentRoleAssignment, null, options, request);
      }
      /// <summary>
      /// Creates a role assignment on an existing incident. Normally, the user field
      /// will be set when assigning a role to oneself, and the next field will be
      /// set when proposing another user as the assignee. Setting the next field
      /// directly to a user other than oneself is equivalent to proposing and
      /// force-assigning the role to the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CreateIncidentRoleAssignmentAsync(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIncidentRoleAssignmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a role assignment on an existing incident. Normally, the user field
      /// will be set when assigning a role to oneself, and the next field will be
      /// set when proposing another user as the assignee. Setting the next field
      /// directly to a user other than oneself is equivalent to proposing and
      /// force-assigning the role to the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CreateIncidentRoleAssignmentAsync(global::Google.Cloud.Irm.V1Alpha2.CreateIncidentRoleAssignmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIncidentRoleAssignment, null, options, request);
      }
      /// <summary>
      /// Deletes an existing role assignment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIncidentRoleAssignment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing role assignment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteIncidentRoleAssignment(global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIncidentRoleAssignment, null, options, request);
      }
      /// <summary>
      /// Deletes an existing role assignment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIncidentRoleAssignmentAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIncidentRoleAssignmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing role assignment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIncidentRoleAssignmentAsync(global::Google.Cloud.Irm.V1Alpha2.DeleteIncidentRoleAssignmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIncidentRoleAssignment, null, options, request);
      }
      /// <summary>
      /// Lists role assignments that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse ListIncidentRoleAssignments(global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIncidentRoleAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists role assignments that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse ListIncidentRoleAssignments(global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIncidentRoleAssignments, null, options, request);
      }
      /// <summary>
      /// Lists role assignments that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse> ListIncidentRoleAssignmentsAsync(global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIncidentRoleAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists role assignments that are part of an incident.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsResponse> ListIncidentRoleAssignmentsAsync(global::Google.Cloud.Irm.V1Alpha2.ListIncidentRoleAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIncidentRoleAssignments, null, options, request);
      }
      /// <summary>
      /// Starts a role handover. The proposed assignee will receive an email
      /// notifying them of the assignment. This will fail if a role handover is
      /// already pending.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment RequestIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestIncidentRoleHandover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a role handover. The proposed assignee will receive an email
      /// notifying them of the assignment. This will fail if a role handover is
      /// already pending.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment RequestIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Starts a role handover. The proposed assignee will receive an email
      /// notifying them of the assignment. This will fail if a role handover is
      /// already pending.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> RequestIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestIncidentRoleHandoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a role handover. The proposed assignee will receive an email
      /// notifying them of the assignment. This will fail if a role handover is
      /// already pending.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> RequestIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.RequestIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Confirms a role handover. This will fail if the 'proposed_assignee' field
      /// of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
      /// the request. If the caller is not the new_assignee,
      /// ForceIncidentRoleHandover should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment ConfirmIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmIncidentRoleHandover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirms a role handover. This will fail if the 'proposed_assignee' field
      /// of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
      /// the request. If the caller is not the new_assignee,
      /// ForceIncidentRoleHandover should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment ConfirmIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfirmIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Confirms a role handover. This will fail if the 'proposed_assignee' field
      /// of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
      /// the request. If the caller is not the new_assignee,
      /// ForceIncidentRoleHandover should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ConfirmIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmIncidentRoleHandoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirms a role handover. This will fail if the 'proposed_assignee' field
      /// of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
      /// the request. If the caller is not the new_assignee,
      /// ForceIncidentRoleHandover should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ConfirmIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.ConfirmIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfirmIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Forces a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
      /// should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment ForceIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ForceIncidentRoleHandover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
      /// should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment ForceIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ForceIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Forces a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
      /// should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ForceIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ForceIncidentRoleHandoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
      /// should be used instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> ForceIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.ForceIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ForceIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Cancels a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment CancelIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelIncidentRoleHandover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment CancelIncidentRoleHandover(global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelIncidentRoleHandover, null, options, request);
      }
      /// <summary>
      /// Cancels a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CancelIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelIncidentRoleHandoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a role handover. This will fail if the 'proposed_assignee' field of
      /// the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
      /// request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Irm.V1Alpha2.IncidentRoleAssignment> CancelIncidentRoleHandoverAsync(global::Google.Cloud.Irm.V1Alpha2.CancelIncidentRoleHandoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelIncidentRoleHandover, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IncidentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IncidentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IncidentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateIncident, serviceImpl.CreateIncident)
          .AddMethod(__Method_GetIncident, serviceImpl.GetIncident)
          .AddMethod(__Method_SearchIncidents, serviceImpl.SearchIncidents)
          .AddMethod(__Method_UpdateIncident, serviceImpl.UpdateIncident)
          .AddMethod(__Method_SearchSimilarIncidents, serviceImpl.SearchSimilarIncidents)
          .AddMethod(__Method_CreateAnnotation, serviceImpl.CreateAnnotation)
          .AddMethod(__Method_ListAnnotations, serviceImpl.ListAnnotations)
          .AddMethod(__Method_UpdateAnnotation, serviceImpl.UpdateAnnotation)
          .AddMethod(__Method_CreateTag, serviceImpl.CreateTag)
          .AddMethod(__Method_DeleteTag, serviceImpl.DeleteTag)
          .AddMethod(__Method_ListTags, serviceImpl.ListTags)
          .AddMethod(__Method_CreateSignal, serviceImpl.CreateSignal)
          .AddMethod(__Method_ListSignals, serviceImpl.ListSignals)
          .AddMethod(__Method_GetSignal, serviceImpl.GetSignal)
          .AddMethod(__Method_UpdateSignal, serviceImpl.UpdateSignal)
          .AddMethod(__Method_AcknowledgeSignal, serviceImpl.AcknowledgeSignal)
          .AddMethod(__Method_EscalateIncident, serviceImpl.EscalateIncident)
          .AddMethod(__Method_CreateArtifact, serviceImpl.CreateArtifact)
          .AddMethod(__Method_ListArtifacts, serviceImpl.ListArtifacts)
          .AddMethod(__Method_UpdateArtifact, serviceImpl.UpdateArtifact)
          .AddMethod(__Method_DeleteArtifact, serviceImpl.DeleteArtifact)
          .AddMethod(__Method_GetShiftHandoffPresets, serviceImpl.GetShiftHandoffPresets)
          .AddMethod(__Method_SendShiftHandoff, serviceImpl.SendShiftHandoff)
          .AddMethod(__Method_CreateSubscription, serviceImpl.CreateSubscription)
          .AddMethod(__Method_ListSubscriptions, serviceImpl.ListSubscriptions)
          .AddMethod(__Method_DeleteSubscription, serviceImpl.DeleteSubscription)
          .AddMethod(__Method_CreateIncidentRoleAssignment, serviceImpl.CreateIncidentRoleAssignment)
          .AddMethod(__Method_DeleteIncidentRoleAssignment, serviceImpl.DeleteIncidentRoleAssignment)
          .AddMethod(__Method_ListIncidentRoleAssignments, serviceImpl.ListIncidentRoleAssignments)
          .AddMethod(__Method_RequestIncidentRoleHandover, serviceImpl.RequestIncidentRoleHandover)
          .AddMethod(__Method_ConfirmIncidentRoleHandover, serviceImpl.ConfirmIncidentRoleHandover)
          .AddMethod(__Method_ForceIncidentRoleHandover, serviceImpl.ForceIncidentRoleHandover)
          .AddMethod(__Method_CancelIncidentRoleHandover, serviceImpl.CancelIncidentRoleHandover).Build();
    }

  }
}
#endregion
